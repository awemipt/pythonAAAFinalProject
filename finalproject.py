from random import randint
import click
from typing import Literal


class Recipe:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –ø–∏—Ü—Ü"""
    recipies = {'Margherita': ['tomato sauce',  'mozzarella', 'tomatoes'],
                'Pepperoni': ['tomato sauce', 'mozzarella',
                              'pepperoni'],
                'Hawaiian': ['tomato sauce', 'mozzarella',
                             'chicken',
                             'pineapples']
                }
    pizzas = {'Margherita': 'üßÄ',
              'Pepperoni': 'üçï',
              'Hawaiian': 'üçç'
              }

    def __str__(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        return '\n'.join([
            f'-{name}{self.pizzas[name]}: {", ".join(recipie)}'
            for name, recipie in self.recipies.items()
            ])


class Pizza(Recipe):
    def __init__(self, size: Literal['L', 'XL'] = 'L',
                 pizza_type: Literal['Margherita',
                                     'Pepperoni',
                                     'Hawaiian'] = 'Margherita') -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Ü—Ü—ã"""
        self.size = size
        self.pizza_type = pizza_type
        self.ingrediences = self.recipies[self.pizza_type]

    def __eq__(self, __value: object) -> bool:
        """–ü—Ä–æ–≤–µ–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –ø–∏—Ü—Ü"""
        if not isinstance(__value, Pizza):
            return NotImplemented
        return self.size == __value.size and \
            self.ingrediences == __value.ingrediences

    def dict(self) -> None:
        """–í—ã–≤–æ–¥ –∏–Ω–≥–µ–¥–µ–∏–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã"""
        print(self.ingrediences)


def log(string: str):
    """–§–∞–±—Ä–∏–∫–∞ –¥–µ–∫–æ–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏/–≥–æ—Ç–æ–≤–∫–∏"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            time = randint(1, 10)
            nonlocal string
            try:
                val = func(*args, **kwargs)
            except ValueError:
                print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
            else:
                print(string.format(time))
            return val
        return wrapper
    return decorator


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def delivery_pizza(pizza: Pizza) -> None:
    """–î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã"""
    pass


@log('—Çüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!')
def bake(pizza: Literal['Margherita', 'Pepperoni', 'Hawaiian']) -> Pizza:
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    menu = Recipe()
    if pizza in menu.recipies:
        return Pizza(pizza_type=pizza)
    else:
        raise ValueError()


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}c!')
def pickup_pizza(pizza: Pizza) -> None:
    """–°–∞–º–æ–º–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã"""
    pass


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.option('--pickup', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool, pickup: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    if delivery and pickup:
        print('–ó–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.',
              '\n–í—ã–±–µ—Ä–µ—Ç–µ –ª–∏–±–æ –¥–æ—Å—Ç–∞–≤–∫—É, –ª–∏–±–æ —Å–∞–º–æ–≤—ã–≤–æ–∑')
    else:
        pizza = bake(pizza=pizza)
        if delivery:
            delivery_pizza(pizza=pizza)
        if pickup:
            pickup_pizza(pizza=pizza)


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    r = Recipe()
    print(r)


if __name__ == '__main__':
    cli()
